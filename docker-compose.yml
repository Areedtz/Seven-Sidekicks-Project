version: "3"
services:
    general_code:
        # Set CURRENT_ID by running CURRENT_UID=$(id -u):$(id -g) docker-compose up
        user: ${CURRENT_UID}
        build: .
        restart: always
        volumes:
            - ./src:/code
        ports:
            - "80:8080"
        command: ./__main__.py --type general
        depends_on:
            - pipeline

    music_code:
        # Set CURRENT_ID by running CURRENT_UID=$(id -u):$(id -g) docker-compose up
        user: ${CURRENT_UID}
        build: .
        restart: always
        volumes:
            - ./src:/code
        ports:
            - "81:8080"
        command: ./__main__.py --type music
        depends_on:
            - pipeline

    video_code:
        # Set CURRENT_ID by running CURRENT_UID=$(id -u):$(id -g) docker-compose up
        user: ${CURRENT_UID}
        build: .
        restart: always
        volumes:
            - ./src:/code
        ports:
            - "82:8080"
        command: ./__main__.py --type video
        depends_on:
            - pipeline

    pipeline:
        user: ${CURRENT_UID}
        build: .
        volumes:
            - ./src:/code
        command: celery -A tasks worker --loglevel=info
        depends_on:
            - broker
            - mongodb
            - backend
            - sqldb

    broker:
        image: rabbitmq
        restart: always

    backend:
        image: redis
        restart: always

    # Comment out this container if on production envrionment
    mongodb:
        image: mongo
        restart: always
        environment:
            MONGO_INITDB_ROOT_USERNAME: root
            MONGO_INITDB_ROOT_PASSWORD: pass

    # Comment out this container if on production environment
    sqldb:
        image: postgres
        restart: always
        environment:
            POSTGRES_DB: itumir
            POSTGRES_PASSWORD: pass
